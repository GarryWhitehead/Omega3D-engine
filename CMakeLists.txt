CMAKE_MINIMUM_REQUIRED(VERSION 3.7)
CMAKE_POLICY(VERSION 3.7)

PROJECT(OMEGA_ENGINE VERSION 1 LANGUAGES CXX C)
SET(CMAKE_CXX_STANDARD 17)
 
# compiler specific flags
IF(CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
	SET(OMEGA_CXX_FLAGS -Wshadow -Wall -Wextra -Wno-missing-field-initializers)
ELSEIF(MSVC)
	SET(OMEGA_CXX_FLAGS /D_CRT_SECURE_NO_WARNINGS /DNOMINMAX /MP)
ENDIF()

ADD_DEFINITIONS(-std=c++17)

OPTION(OMEGA_DEBUG_VERBOSE "Enable verbose debug output" OFF)
OPTION(OMEGA_ENABLE_LAYERS "Enable Vulkan validation layers" OFF)
OPTION(OMEGA_ENABLE_THREADING "Enable threaded engine mode" ON)
OPTION(OMEGA_BUILD_TOOLS "Build all tools for engine" OFF)
OPTION(OMEGA_TESTS "Run all tests" OFF)
OPTION(THREAD_SANITIZE "Run thread sanitizer" OFF)
OPTION(ADDRESS_SANITIZE "Run address sanitizer" OFF)
OPTION(MEMORY_SANITIZE "Run memory sanitizer" OFF)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

# external library paths
SET(BUILD_SHARED_LIBRARY OFF CACHE BOOL "Build shared libraries")
SET(SPIRV_CROSS_EXTERNAL_PATH "${CMAKE_SOURCE_DIR}/external/spirv-cross/" CACHE STRING "Spirv-cross path")
SET(TINY_GLTF_EXTERNAL_PATH "${CMAKE_SOURCE_DIR}/external/tiny-gltf/" CACHE STRING "tiny-gltf path")
SET(VULKAN_HPP_EXTERNAL_PATH "${CMAKE_SOURCE_DIR}/external/vulkan-hpp/" CACHE STRING "vulkan-hpp path")

# find vulkan using cmake module
IF(NOT CMAKE_VERSION VERSION_LESS 3.7.0)
	message(STATUS "Using cmake version which supports FindVulkan. Using this module to find Vulkan")
	find_package(Vulkan)
ENDIF()
	
# libraries required for Omega Engine
ADD_LIBRARY(SPIRV_CROSS_LIB "${SPIRV_CROSS_EXTERNAL_PATH}/spirv_cross.hxx")
INCLUDE_DIRECTORIES("${SPIRV_CROSS_EXTERNAL_PATH}")
ADD_SUBDIRECTORY(SPIRV_CROSS_LIB)
SET(OMEGA_LIBS ${OMEGA_LIBS} SPIRV_CROSS_LIB)

ADD_LIBRARY(TINY_GLTF_LIB "${TINY_GLTF_EXTERNAL_PATH}/tiny_gltf.hxx")
INCLUDE_DIRECTORIES("${TINY_GLTF_EXTERNAL_PATH}")
ADD_SUBDIRECTORY(TINY_GLTF_LIB)
SET(OMEGA_LIBS ${OMEGA_LIBS} TINY_GLTF_LIB)

ADD_LIBRARY(VULKAN_HPP_LIB "${VULKAN_HPP_EXTERNAL_PATH}/vualkn_hpp.hxx")
INCLUDE_DIRECTORIES("${VULKAN_HPP_EXTERNAL_PATH}")
ADD_SUBDIRECTORY(VULKAN_HPP_LIB)
SET(OMEGA_LIBS ${OMEGA_LIBS} VULKAN_HPP_LIB)

# linking flags - sanitizers
SET(LINK_FLAGS)
IF(THREAD_SANITIZE)
	SET(CXX_FLAGS ${CXX_FLAGS} -fsanitize=thread)
	SET(LINK_FLAGS ${LINK_FLAGS} -fsanitize=thread)
ENDIF()

IF(ADDRESS_SANITIZE)
	SET(CXX_FLAGS ${CXX_FLAGS} -fsanitize=address)
	SET(LINK_FLAGS ${LINK_FLAGS} -fsanitize=address)
ENDIF()

IF(MEMORY_SANITIZE)
	SET(CXX_FLAGS ${CXX_FLAGS} -fsanitize=memory)
	SET(LINK_FLAGS ${LINK_FLAGS} -fsanitize=memory)
ENDIF()

ADD_LIBRARY(OMEGA_ENGINE STATIC)
TARGET_COMPILE_OPTIONS(OMEGA_ENGINE PRIVATE ${OMEGA_CXX_FLAGS})

# include targets
TARGET_INCLUDE_DIRECTORIES(OMEGA_ENGINE PUBLIC
	${CMAKE_CURRENT_SOURCE_DIR}/AssetInterface
	${CMAKE_CURRENT_SOURCE_DIR}/Engine
	${CMAKE_CURRENT_SOURCE_DIR}/Image
	${CMAKE_CURRENT_SOURCE_DIR}/Managers
	${CMAKE_CURRENT_SOURCE_DIR}/Models
	${CMAKE_CURRENT_SOURCE_DIR}/ObjectInterface
	${CMAKE_CURRENT_SOURCE_DIR}/OEMaths
	${CMAKE_CURRENT_SOURCE_DIR}/PostProcess
	${CMAKE_CURRENT_SOURCE_DIR}/Rendering
	${CMAKE_CURRENT_SOURCE_DIR}/Threading
	${CMAKE_CURRENT_SOURCE_DIR}/utility
	${CMAKE_CURRENT_SOURCE_DIR}/Vulkan
)

TARGET_SOURCES(OMEGA_ENGINE PUBLIC
	AssetInterface/AssetManager.hpp AssetInterface/AssetManager.cpp
	AssetInterface/MappedTexture.hpp AssetInterface/MappedTexture.cpp
)

# build tools if required
IF(OMEGA_BUILD_TOOLS)
	#ADD_EXECUTABLE(OMEGA-ENGINE )
ENDIF()

# example executables 
ADD_EXECUTABLE(OMEGA_ENGINE omega_engine.hpp)
TARGET_LINK_LIBRARIES(OMEGA_ENGINE ${OMEGA_LIBS})


# run some tests to make sure I haven't broke anything!
# to add later.....
