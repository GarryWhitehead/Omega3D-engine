#include "VulkanWater.h"
#include "VulkanCore/VulkanEngine.h"
#include "VulkanCore/VulkanDeferred.h"
#include "VulkanCore/TerrainUtility.h"
#include "VulkanCore/VulkanTexture.h"
#include "VulkanCore/vkFFT.h"
#include "Systems/camera_system.h"
#include "Engine/world.h"
#include "Engine/engine.h"


VulkanWater::VulkanWater(VulkanEngine *engine, VulkanUtility *utility, VkMemoryManager *memory) :
	VulkanModule(utility, memory),
	p_vkEngine(engine)
{
	p_FFT = new vkFFT(p_vkEngine, p_vkMemory);

	// setup default water parameters - TODO : this will be set when the world is generated by data stored in .json config file
	m_waterParams.amplitude = 80.0f;
	m_waterParams.time = 0.8f;
	m_waterParams.choppiness = 1.3f;
	m_waterParams.windDir = glm::vec2(0.6f, 0.8f);
	m_waterParams.windSpeed = 100.0f;
	m_waterParams.patchLength = 1000.0f;

	Init();
}


VulkanWater::~VulkanWater()
{
}

void VulkanWater::PrepareBuffers()
{
	// evaluation tesselation ubo
	m_waterInfo.uboTese = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_DYNAMIC, sizeof(TerrainTeseUbo));
	
	// fragment shader ubo
	m_waterInfo.uboFrag = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_DYNAMIC, sizeof(TerrainFragUbo));
}

void VulkanWater::PrepareDescriptorSets()
{
	// terrain descriptors
	std::array<VkDescriptorPoolSize, 2> descrPoolSize = {};
	descrPoolSize[0].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	descrPoolSize[0].descriptorCount = 3;										// fragment and tesselation con/eval shaders
	descrPoolSize[1].type = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
	descrPoolSize[1].descriptorCount = 3;

	VkDescriptorPoolCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	createInfo.poolSizeCount = static_cast<uint32_t>(descrPoolSize.size());
	createInfo.pPoolSizes = descrPoolSize.data();
	createInfo.maxSets = 1;

	VK_CHECK_RESULT(vkCreateDescriptorPool(p_vkEngine->GetDevice(), &createInfo, nullptr, &m_waterInfo.descriptors.pool));

	std::array<VkDescriptorSetLayoutBinding, 5> layoutBinding;
	layoutBinding[0] = vkUtility->InitLayoutBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);						// bindings for the UBO	
	layoutBinding[1] = vkUtility->InitLayoutBinding(1, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);				// bindings for the displacement map image sampler
	layoutBinding[2] = vkUtility->InitLayoutBinding(2, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT);																		// normal map
	layoutBinding[3] = vkUtility->InitLayoutBinding(3, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);							// bindings for perlin noise texture
	layoutBinding[4] = vkUtility->InitLayoutBinding(4, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_FRAGMENT_BIT);

	VkDescriptorSetLayoutCreateInfo layoutInfo = {};
	layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
	layoutInfo.bindingCount = static_cast<uint32_t>(layoutBinding.size());
	layoutInfo.pBindings = layoutBinding.data();

	VK_CHECK_RESULT(vkCreateDescriptorSetLayout(p_vkEngine->GetDevice(), &layoutInfo, nullptr, &m_waterInfo.descriptors.layout));

	VkDescriptorSetAllocateInfo allocInfo = {};
	allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
	allocInfo.descriptorPool = m_waterInfo.descriptors.pool;
	allocInfo.descriptorSetCount = 1;
	allocInfo.pSetLayouts = &m_waterInfo.descriptors.layout;

	VK_CHECK_RESULT(vkAllocateDescriptorSets(p_vkEngine->GetDevice(), &allocInfo, &m_waterInfo.descriptors.set));

	std::array<VkDescriptorBufferInfo, 2> bufferInfo;
	bufferInfo[0] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_waterInfo.uboTese.block_id), m_waterInfo.uboTese.offset, m_waterInfo.uboTese.size);															
	bufferInfo[1] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_waterInfo.uboFrag.block_id), m_waterInfo.uboFrag.offset, m_waterInfo.uboFrag.size);														
	std::array<VkDescriptorImageInfo, 3> imageInfo;
	imageInfo[0] = vkUtility->InitImageInfoDescriptor(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, p_FFT->m_images.displacement.imageView, p_FFT->m_images.displacement.texSampler);		// displacement texture sampler - derives from compute shader computations
	imageInfo[1] = vkUtility->InitImageInfoDescriptor(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, p_FFT->m_images.normal.imageView, p_FFT->m_images.normal.texSampler);							// texture sampler for normal map
	imageInfo[2] = vkUtility->InitImageInfoDescriptor(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, m_waterInfo.noiseImage.imageView, m_waterInfo.noiseImage.texSampler);					// texture sampler for perlin noise

	std::array<VkWriteDescriptorSet, 5> writeDescrSet = {};
	writeDescrSet[0] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, &bufferInfo[0]);
	writeDescrSet[1] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 1, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, &imageInfo[0]);
	writeDescrSet[2] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 2, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, &imageInfo[1]);
	writeDescrSet[3] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 3, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, &imageInfo[2]);
	writeDescrSet[4] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 4, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, &bufferInfo[1]);

	vkUpdateDescriptorSets(p_vkEngine->GetDevice(), static_cast<uint32_t>(writeDescrSet.size()), writeDescrSet.data(), 0, nullptr);
}

void VulkanWater::PreparePipeline()
{
	auto vkDeferred = p_vkEngine->VkModule<VulkanDeferred>();

	// tesselation pipeline
	TerrainUtility::Vertex vertex;
	auto bindingDescr = vertex.GetInputBindingDescription();
	auto attrDescr = vertex.GetAttrBindingDescription();

	VkPipelineVertexInputStateCreateInfo vertexInfo = {};
	vertexInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
	vertexInfo.vertexBindingDescriptionCount = 1;
	vertexInfo.pVertexBindingDescriptions = &bindingDescr;
	vertexInfo.vertexAttributeDescriptionCount = static_cast<uint32_t>(attrDescr.size());
	vertexInfo.pVertexAttributeDescriptions = attrDescr.data();

	VkPipelineInputAssemblyStateCreateInfo assemblyInfo = {};
	assemblyInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
	assemblyInfo.topology = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST;										// used for tesselation shader draw
	assemblyInfo.primitiveRestartEnable = VK_FALSE;

	VkPipelineViewportStateCreateInfo viewportState = vkUtility->InitViewPortCreateInfo(p_vkEngine->GetViewPort(), p_vkEngine->GetScissor(), 1, 1);

	VkPipelineRasterizationStateCreateInfo rasterInfo = vkUtility->InitRasterzationState(VK_POLYGON_MODE_FILL, VK_CULL_MODE_NONE, VK_FRONT_FACE_COUNTER_CLOCKWISE);

	VkPipelineMultisampleStateCreateInfo multiInfo = vkUtility->InitMultisampleState(VK_SAMPLE_COUNT_1_BIT);

	// colour attachment required for each colour buffer
	std::array<VkPipelineColorBlendAttachmentState, 8> colorAttach = {};
	colorAttach[0].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[0].blendEnable = VK_FALSE;
	colorAttach[1].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[1].blendEnable = VK_FALSE;
	colorAttach[2].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[2].blendEnable = VK_FALSE;
	colorAttach[3].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[3].blendEnable = VK_FALSE;
	colorAttach[4].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[4].blendEnable = VK_FALSE;
	colorAttach[5].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[5].blendEnable = VK_FALSE;
	colorAttach[6].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[6].blendEnable = VK_FALSE;
	colorAttach[7].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[7].blendEnable = VK_FALSE;

	VkPipelineColorBlendStateCreateInfo colorInfo = {};
	colorInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
	colorInfo.logicOpEnable = VK_FALSE;
	colorInfo.attachmentCount = static_cast<uint32_t>(colorAttach.size());
	colorInfo.pAttachments = colorAttach.data();

	VkDynamicState states[] = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR, VK_DYNAMIC_STATE_LINE_WIDTH };
	VkPipelineDynamicStateCreateInfo dynamicInfo = {};
	dynamicInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
	dynamicInfo.pDynamicStates = states;
	dynamicInfo.dynamicStateCount = 3;

	VkPipelineDepthStencilStateCreateInfo depthInfo = {};
	depthInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
	depthInfo.depthTestEnable = VK_TRUE;
	depthInfo.depthWriteEnable = VK_TRUE;
	depthInfo.depthCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL;

	// enable stencil test - to ensure that the skybox is rendered correctly
	depthInfo.stencilTestEnable = VK_TRUE;
	depthInfo.back.compareOp = VK_COMPARE_OP_ALWAYS;
	depthInfo.back.failOp = VK_STENCIL_OP_REPLACE;
	depthInfo.back.depthFailOp = VK_STENCIL_OP_REPLACE;
	depthInfo.back.passOp = VK_STENCIL_OP_REPLACE;
	depthInfo.back.writeMask = 0xff;
	depthInfo.back.compareMask = 0xff;
	depthInfo.back.reference = 1;
	depthInfo.front = depthInfo.back;

	VkPipelineTessellationStateCreateInfo tessInfo = {};
	tessInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
	tessInfo.patchControlPoints = 4;		//	patch quad

	VkPipelineLayoutCreateInfo pipelineInfo = {};
	pipelineInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	pipelineInfo.setLayoutCount = 1;
	pipelineInfo.pSetLayouts = &m_waterInfo.descriptors.layout;
	pipelineInfo.pPushConstantRanges = 0;
	pipelineInfo.pushConstantRangeCount = 0;

	VK_CHECK_RESULT(vkCreatePipelineLayout(p_vkEngine->GetDevice(), &pipelineInfo, nullptr, &m_waterInfo.pipelineInfo.layout));

	// load the shaders with tyexture samplers for material textures
	m_waterInfo.shader[0] = vkUtility->InitShaders("terrain/water/water-vert.spv", VK_SHADER_STAGE_VERTEX_BIT);
	m_waterInfo.shader[1] = vkUtility->InitShaders("terrain/water/water-frag.spv", VK_SHADER_STAGE_FRAGMENT_BIT);
	m_waterInfo.shader[2] = vkUtility->InitShaders("terrain/water/water-tesc.spv", VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT);
	m_waterInfo.shader[3] = vkUtility->InitShaders("terrain/water/water-tese.spv", VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);

	VkGraphicsPipelineCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
	createInfo.stageCount = static_cast<uint32_t>(m_waterInfo.shader.size());
	createInfo.pStages = m_waterInfo.shader.data();
	createInfo.pVertexInputState = &vertexInfo;
	createInfo.pInputAssemblyState = &assemblyInfo;
	createInfo.pViewportState = &viewportState;
	createInfo.pRasterizationState = &rasterInfo;
	createInfo.pMultisampleState = &multiInfo;
	createInfo.pDepthStencilState = &depthInfo;
	createInfo.pColorBlendState = &colorInfo;
	createInfo.pDynamicState = &dynamicInfo;
	createInfo.pTessellationState = &tessInfo;
	createInfo.layout = m_waterInfo.pipelineInfo.layout;
	createInfo.renderPass = vkDeferred->GetRenderPass();			// render into the offscreen buffer
	createInfo.subpass = 0;											// G buffer pass
	createInfo.basePipelineIndex = -1;
	createInfo.flags = VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT;
	createInfo.basePipelineHandle = VK_NULL_HANDLE;

	VK_CHECK_RESULT(vkCreateGraphicsPipelines(p_vkEngine->GetDevice(), VK_NULL_HANDLE, 1, &createInfo, nullptr, &m_waterInfo.pipelineInfo.pipeline));
}

void VulkanWater::GenerateWaterCmdBuffer(VkCommandBuffer cmdBuffer, VkDescriptorSet set, VkPipelineLayout layout, VkPipeline pipeline)
{
	if (pipeline == VK_NULL_HANDLE) {
		vkCmdSetLineWidth(cmdBuffer, 1.0f);
	}

	VkDeviceSize bgOffsets[] = { m_waterInfo.vertices.offset };

	//  draw water
	vkCmdBindPipeline(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, (pipeline == VK_NULL_HANDLE) ? m_waterInfo.pipelineInfo.pipeline : pipeline);
	vkCmdBindVertexBuffers(cmdBuffer, 0, 1, &p_vkMemory->blockBuffer(m_waterInfo.vertices.block_id), bgOffsets);
	vkCmdBindIndexBuffer(cmdBuffer, p_vkMemory->blockBuffer(m_waterInfo.indices.block_id), m_waterInfo.indices.offset, VK_INDEX_TYPE_UINT32);
	vkCmdBindDescriptorSets(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, (pipeline == VK_NULL_HANDLE) ? m_waterInfo.pipelineInfo.layout : layout, 0, 1, (pipeline == VK_NULL_HANDLE) ? &m_waterInfo.descriptors.set : &set, 0, NULL);
	vkCmdDrawIndexed(cmdBuffer, m_waterInfo.indexCount, 1, 0, 0, 0);
}

void VulkanWater::SubmitWaterCompute()
{
	// submit fft compute shaders - spectrum, FFT and displacement
	p_FFT->SubmitFFTCompute();
}

// ================================================================ mesh generation ======================================================================================
void VulkanWater::GenerateMeshData()
{
	TerrainUtility *p_utility = new TerrainUtility();

	// generate vertices and uv data
	std::vector<TerrainUtility::Vertex> vertices;
	p_utility->GenerateVertices(PATCH_SIZE, UV_SCALE, vertices);

	// generate the indices for the patch quads
	m_waterInfo.indexCount = ((PATCH_SIZE - 1) * (PATCH_SIZE - 1)) * 4;

	std::vector<uint32_t> indices;
	p_utility->GenerateIndices(PATCH_SIZE, indices);

	// now map to device memory
	// vertex
	m_waterInfo.vertices = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, vertices.size() * sizeof(TerrainUtility::Vertex));
	p_vkMemory->MapDataToSegment<TerrainUtility::Vertex>(m_waterInfo.vertices, vertices);

	//index
	m_waterInfo.indices = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, indices.size() * sizeof(uint32_t));
	p_vkMemory->MapDataToSegment<uint32_t>(m_waterInfo.indices, indices);

	delete p_utility;
}

 // =============================================================== general functions ====================================================================================

void VulkanWater::LoadWaterAssets()
{
	// import the tiling image
	m_waterInfo.noiseImage.LoadTexture("assets/textures/perlin_noise.ktx", VK_SAMPLER_ADDRESS_MODE_REPEAT, 16.0f, VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE, VK_FORMAT_BC3_UNORM_BLOCK, p_vkEngine->GetCmdPool(), p_vkEngine, p_vkMemory);
}

void VulkanWater::Update(int acc_time)
{
	auto camera = p_vkEngine->GetCurrentWorld()->RequestSystem<CameraSystem>();

	// update terrain tesselation ubo
	std::vector<TerrainTeseUbo> ubo(1);
	ubo[0].projection = camera->m_cameraInfo.projection;
	ubo[0].viewMatrix = camera->m_cameraInfo.viewMatrix;
	ubo[0].cameraPos = -glm::vec4(camera->GetCameraPosition(), 1.0f);
	ubo[0].modelMatrix = glm::mat4(1.0f);
	ubo[0].screenDim = glm::vec2(p_vkEngine->GetSurfaceExtentW(), p_vkEngine->GetSurfaceExtentH());

	// perlin noise constants
	ubo[0].perlinOctave = PERLIN_OCTAVE;
	ubo[0].perlinAmplitude = PERLIN_AMPLITUDE;
	ubo[0].perlinMovement = -m_waterParams.windDir * (float)acc_time * PERLIN_SPEED;

	// constant tessellation values
	ubo[0].dispFactor = TESSELLATION_DISP_FACTOR;
	ubo[0].tessFactor = TESSELLATION_FACTOR;
	ubo[0].tessEdgeSize = TESSELLATION_EDGE_SIZE;
	p_vkMemory->MapDataToSegment<TerrainTeseUbo>(m_waterInfo.uboTese, ubo);

	// fragment data ubo update
	std::vector<TerrainFragUbo> fragUbo(1);
	fragUbo[0].perlinOctave = PERLIN_OCTAVE;
	fragUbo[0].perlinMovement = -m_waterParams.windDir * (float)acc_time * PERLIN_SPEED;		// updated per draw call
	fragUbo[0].perlinGradient = PERLIN_GRADIENT;
	fragUbo[0].texelSize2x = m_waterParams.patchLength / static_cast<float>(512 * 2);
	p_vkMemory->MapDataToSegment<TerrainFragUbo>(m_waterInfo.uboFrag, fragUbo);

	// update the time dependent h(t)
	p_FFT->Update(acc_time, m_waterParams.patchLength);
}

void VulkanWater::Init()
{
	// Begin by importing required textures
	LoadWaterAssets();

	// The order of calculation flow is as follows:
	// 1. h0(k) and h0(-k) values are generated before compute shaders
	// 2. time dependent h0 values are generated
	// 3. the fast fourier transform is carried out using the h(t) values
	// 4. a displacement map is created - d(x,y,z)
	// 5. the gradient map is created from the displacement data
	p_FFT->Init(m_waterParams.patchLength, m_waterParams.windSpeed, m_waterParams.amplitude, m_waterParams.windDir);

	// genertae mesh data for tessellation
	GenerateMeshData();

	// init rendering pipeline
	PrepareBuffers();
	PrepareDescriptorSets();
	PreparePipeline();
}

void VulkanWater::Destroy()
{

}

