#include "VulkanWater.h"
#include "VulkanCore/VulkanEngine.h"
#include "VulkanCore/VulkanDeferred.h"
#include "VulkanCore/TerrainUtility.h"
#include "VulkanCore/VulkanTexture.h"
#include "VulkanCore/vkFFT.h"
#include "Systems/camera_system.h"
#include "Engine/world.h"
#include "Engine/engine.h"
#include "utility/RandomNumber.h"

VulkanWater::VulkanWater(VulkanEngine *engine, VulkanUtility *utility, VkMemoryManager *memory) :
	VulkanModule(utility, memory),
	p_vkEngine(engine)
{
	p_FFT = new vkFFT(p_vkEngine, p_vkMemory);

	// setup default water parameters - TODO : this will be set when the world is generated by data stored in .json config file
	m_waterParams.amplitude = 0.35f;
	m_waterParams.time = 0.8f;
	m_waterParams.choppiness = 1.3f;
	m_waterParams.windDir = glm::vec2(0.8f, 0.6f);
	m_waterParams.windSpeed = 600.0f;
	m_waterParams.patchLength = 1000.0f;

	Init();
}


VulkanWater::~VulkanWater()
{
}

// 
// =============================================== offscreen setup for descriptors, pipeline and command buffer ======================================================================================
void VulkanWater::PrepareOffscreenFrameBuffer()
{
	// image sampler, framebuffer and renderpass for normal map generation pipeline
	m_normalInfo.image.PrepareImage(VK_FORMAT_R16G16B16A16_UNORM, VK_SAMPLER_ADDRESS_MODE_REPEAT, VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_SAMPLED_BIT, DISPLACEMENT_MAP_SIZE, DISPLACEMENT_MAP_SIZE, p_vkEngine);
	
	m_normalInfo.renderpass.AddAttachment(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, VK_FORMAT_R16G16B16A16_UNORM);
	m_normalInfo.renderpass.AddReference(VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, 0);
	m_normalInfo.renderpass.PrepareRenderPass(p_vkEngine->GetDevice());

	m_normalInfo.renderpass.PrepareFramebuffer(m_normalInfo.image.imageView, DISPLACEMENT_MAP_SIZE, DISPLACEMENT_MAP_SIZE, p_vkEngine->GetDevice());
}

void VulkanWater::PrepareOffscreenBuffers()
{
	// buffers for normal pipeline
	m_buffers.offscreen.normUbo = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_DYNAMIC, sizeof(NormalUbo));

	std::vector<NormalUbo> normUbo(1);
	normUbo[0].choppiness = m_waterParams.choppiness;
	normUbo[0].gridLength = DISPLACEMENT_MAP_SIZE / m_waterParams.patchLength;
	p_vkMemory->MapDataToSegment<NormalUbo>(m_buffers.offscreen.normUbo, normUbo);
}

void VulkanWater::PrepareOffscreenDescriptorSets()
{
	std::array<VkDescriptorPoolSize, 2> descrPoolSize = {};
	descrPoolSize[0].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	descrPoolSize[0].descriptorCount = 1;
	descrPoolSize[1].type = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
	descrPoolSize[1].descriptorCount = 1;

	VkDescriptorPoolCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	createInfo.poolSizeCount = static_cast<uint32_t>(descrPoolSize.size());
	createInfo.pPoolSizes = descrPoolSize.data();
	createInfo.maxSets = 1;

	VK_CHECK_RESULT(vkCreateDescriptorPool(p_vkEngine->GetDevice(), &createInfo, nullptr, &m_normalInfo.descriptors.pool));

	std::array<VkDescriptorSetLayoutBinding, 2> layoutBinding;
	layoutBinding[0] = vkUtility->InitLayoutBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_FRAGMENT_BIT);				// bindings for the UBO	 
	layoutBinding[1] = vkUtility->InitLayoutBinding(1, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT);		// bindings for the displacement map image sampler - used to generate normals																							

	VkDescriptorSetLayoutCreateInfo layoutInfo = {};
	layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
	layoutInfo.bindingCount = static_cast<uint32_t>(layoutBinding.size());
	layoutInfo.pBindings = layoutBinding.data();

	VK_CHECK_RESULT(vkCreateDescriptorSetLayout(p_vkEngine->GetDevice(), &layoutInfo, nullptr, &m_normalInfo.descriptors.layout));

	VkDescriptorSetAllocateInfo allocInfo = {};
	allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
	allocInfo.descriptorPool = m_normalInfo.descriptors.pool;
	allocInfo.descriptorSetCount = 1;
	allocInfo.pSetLayouts = &m_normalInfo.descriptors.layout;

	VK_CHECK_RESULT(vkAllocateDescriptorSets(p_vkEngine->GetDevice(), &allocInfo, &m_normalInfo.descriptors.set));

	std::array<VkDescriptorBufferInfo, 1> bufferInfo;
	bufferInfo[0] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_buffers.offscreen.normUbo.block_id), m_buffers.offscreen.normUbo.offset, m_buffers.offscreen.normUbo.size);		// ubo
	std::array<VkDescriptorImageInfo, 1> imageInfo;
	imageInfo[0] = vkUtility->InitImageInfoDescriptor(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, m_dispComputeInfo.image.imageView, m_dispComputeInfo.image.texSampler);								// displacement map texture sampler
	
	std::array<VkWriteDescriptorSet, 2> writeDescrSet = {};
	writeDescrSet[0] = vkUtility->InitDescriptorSet(m_normalInfo.descriptors.set, 0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, &bufferInfo[0]);
	writeDescrSet[1] = vkUtility->InitDescriptorSet(m_normalInfo.descriptors.set, 1, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, &imageInfo[0]);

	vkUpdateDescriptorSets(p_vkEngine->GetDevice(), static_cast<uint32_t>(writeDescrSet.size()), writeDescrSet.data(), 0, nullptr);
}

void VulkanWater::PrepareOffscreenPipeline()
{
	VkPipelineVertexInputStateCreateInfo vertexInfo = {};
	vertexInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
	vertexInfo.vertexBindingDescriptionCount = 0;
	vertexInfo.vertexAttributeDescriptionCount = 0;

	VkPipelineInputAssemblyStateCreateInfo assemblyInfo = {};
	assemblyInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
	assemblyInfo.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
	assemblyInfo.primitiveRestartEnable = VK_FALSE;

	VkPipelineViewportStateCreateInfo viewportState = vkUtility->InitViewPortCreateInfo(p_vkEngine->GetViewPort(), p_vkEngine->GetScissor(), 1, 1);

	VkPipelineRasterizationStateCreateInfo rasterInfo = vkUtility->InitRasterzationState(VK_POLYGON_MODE_FILL, VK_CULL_MODE_NONE, VK_FRONT_FACE_COUNTER_CLOCKWISE);

	VkPipelineMultisampleStateCreateInfo multiInfo = vkUtility->InitMultisampleState(VK_SAMPLE_COUNT_1_BIT);

	// colour attachment required for each colour buffer
	std::array<VkPipelineColorBlendAttachmentState, 1> colorAttach = {};
	colorAttach[0].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[0].blendEnable = VK_FALSE;

	VkPipelineColorBlendStateCreateInfo colorInfo = {};
	colorInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
	colorInfo.logicOpEnable = VK_FALSE;
	colorInfo.attachmentCount = static_cast<uint32_t>(colorAttach.size());
	colorInfo.pAttachments = colorAttach.data();

	VkPipelineDepthStencilStateCreateInfo depthInfo = {};
	depthInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
	depthInfo.depthTestEnable = VK_FALSE;
	depthInfo.depthWriteEnable = VK_FALSE;
	depthInfo.depthCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL;

	VkDynamicState states[] = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR };
	VkPipelineDynamicStateCreateInfo dynamicInfo = {};
	dynamicInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
	dynamicInfo.pDynamicStates = states;
	dynamicInfo.dynamicStateCount = 2;

	std::vector<VkDescriptorSetLayout> descrLayouts = {  };
	VkPipelineLayoutCreateInfo pipelineInfo = {};
	pipelineInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	pipelineInfo.setLayoutCount = 1;
	pipelineInfo.pSetLayouts = &m_normalInfo.descriptors.layout;
	pipelineInfo.pushConstantRangeCount = 0;

	VK_CHECK_RESULT(vkCreatePipelineLayout(p_vkEngine->GetDevice(), &pipelineInfo, nullptr, &m_normalInfo.pipelineInfo.layout));

	// load the shaders with tyexture samplers for material textures
	m_normalInfo.shader[0] = vkUtility->InitShaders("terrain/water/normal-vert.spv", VK_SHADER_STAGE_VERTEX_BIT);
	m_normalInfo.shader[1] = vkUtility->InitShaders("terrain/water/normal-frag.spv", VK_SHADER_STAGE_FRAGMENT_BIT);

	VkGraphicsPipelineCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
	createInfo.stageCount = 2;
	createInfo.pStages = m_normalInfo.shader.data();
	createInfo.pVertexInputState = &vertexInfo;
	createInfo.pInputAssemblyState = &assemblyInfo;
	createInfo.pViewportState = &viewportState;
	createInfo.pRasterizationState = &rasterInfo;
	createInfo.pMultisampleState = &multiInfo;
	createInfo.pDepthStencilState = &depthInfo;
	createInfo.pColorBlendState = &colorInfo;
	createInfo.pDynamicState = &dynamicInfo;
	createInfo.layout = m_normalInfo.pipelineInfo.layout;
	createInfo.renderPass = m_normalInfo.renderpass.renderpass;
	createInfo.subpass = 0;													
	createInfo.basePipelineIndex = -1;
	createInfo.basePipelineHandle = VK_NULL_HANDLE;
	createInfo.flags = VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT;

	VK_CHECK_RESULT(vkCreateGraphicsPipelines(p_vkEngine->GetDevice(), VK_NULL_HANDLE, 1, &createInfo, nullptr, &m_normalInfo.pipelineInfo.pipeline));
}

void VulkanWater::GenerateOffscreenCmdBuffer(const VkCommandBuffer cmdBuffer)
{
	std::array<VkClearValue, 1> clearValues = {};

	VkRenderPassBeginInfo renderPassInfo = {};
	renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;

	renderPassInfo.renderPass = m_normalInfo.renderpass.renderpass;
	renderPassInfo.framebuffer = m_normalInfo.renderpass.frameBuffer;
	renderPassInfo.renderArea.offset = { 0,0 };
	renderPassInfo.renderArea.extent.width = DISPLACEMENT_MAP_SIZE;
	renderPassInfo.renderArea.extent.height = DISPLACEMENT_MAP_SIZE;
	renderPassInfo.clearValueCount = static_cast<uint32_t>(clearValues.size());
	renderPassInfo.pClearValues = clearValues.data();

	// create a memory barrier to ensure that the displacement compute shader has finished generating the displacement map sampler before we read from it
	VkImageMemoryBarrier memBarrier = {};
	memBarrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
	memBarrier.oldLayout = VK_IMAGE_LAYOUT_GENERAL;
	memBarrier.newLayout = VK_IMAGE_LAYOUT_GENERAL;
	memBarrier.image = m_dispComputeInfo.image.image;
	memBarrier.subresourceRange = { VK_IMAGE_ASPECT_COLOR_BIT, 0, 1, 0, 1 };
	memBarrier.srcAccessMask = VK_ACCESS_SHADER_WRITE_BIT;
	memBarrier.dstAccessMask = VK_ACCESS_SHADER_READ_BIT;
	vkCmdPipelineBarrier(cmdBuffer, VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, 0, 0, nullptr, 0, nullptr, 1, &memBarrier);

	VkViewport viewport = vkUtility->InitViewPort(DISPLACEMENT_MAP_SIZE, DISPLACEMENT_MAP_SIZE, 0.0f, 1.0f);
	vkCmdSetViewport(cmdBuffer, 0, 1, &viewport);

	VkRect2D scissor = vkUtility->InitScissor(DISPLACEMENT_MAP_SIZE, DISPLACEMENT_MAP_SIZE, 0, 0);
	vkCmdSetScissor(cmdBuffer, 0, 1, &scissor);

	vkCmdBeginRenderPass(cmdBuffer, &renderPassInfo, VK_SUBPASS_CONTENTS_INLINE);

	// render the scene into the offscreen frame buffer
	vkCmdBindPipeline(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, m_normalInfo.pipelineInfo.pipeline);
	vkCmdBindDescriptorSets(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, m_normalInfo.pipelineInfo.layout, 0, 1, &m_normalInfo.descriptors.set, 0, NULL);
	vkCmdDraw(cmdBuffer, 3, 1, 0, 0);

	vkCmdEndRenderPass(cmdBuffer);
}

// ================================================================ wave rendering pipeline =================================================================================================

void VulkanWater::PrepareBuffers()
{
	// evaluation tesselation ubo
	m_waterInfo.uboTese = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_DYNAMIC, sizeof(TerrainTeseUbo));
	
	// fragment shader ubo
	m_waterInfo.uboFrag = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_DYNAMIC, sizeof(TerrainFragUbo));

	// map data to device for fragment shader now as it will remain constant
	std::vector<TerrainFragUbo> ubo(1);
	ubo[0].perlinOctave = PERLIN_OCTAVE;
	ubo[0].perlinMovement = PERLIN_SPEED;
	ubo[0].perlinGradient = PERLIN_GRADIENT;
	ubo[0].texelSize2x = m_waterParams.patchLength / DISPLACEMENT_MAP_SIZE * 2;
	p_vkMemory->MapDataToSegment<TerrainFragUbo>(m_waterInfo.uboFrag, ubo);

}
void VulkanWater::PrepareDescriptorSets()
{
	// terrain descriptors
	std::array<VkDescriptorPoolSize, 2> descrPoolSize = {};
	descrPoolSize[0].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	descrPoolSize[0].descriptorCount = 3;										// fragment and tesselation con/eval shaders
	descrPoolSize[1].type = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
	descrPoolSize[1].descriptorCount = 3;

	VkDescriptorPoolCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	createInfo.poolSizeCount = static_cast<uint32_t>(descrPoolSize.size());
	createInfo.pPoolSizes = descrPoolSize.data();
	createInfo.maxSets = 1;

	VK_CHECK_RESULT(vkCreateDescriptorPool(p_vkEngine->GetDevice(), &createInfo, nullptr, &m_waterInfo.descriptors.pool));

	std::array<VkDescriptorSetLayoutBinding, 5> layoutBinding;
	layoutBinding[0] = vkUtility->InitLayoutBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);						// bindings for the UBO	
	layoutBinding[1] = vkUtility->InitLayoutBinding(1, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);				// bindings for the displacement map image sampler
	layoutBinding[2] = vkUtility->InitLayoutBinding(2, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT);																		// normal map
	layoutBinding[3] = vkUtility->InitLayoutBinding(3, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);							// bindings for perlin noise texture
	layoutBinding[4] = vkUtility->InitLayoutBinding(4, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_FRAGMENT_BIT);

	VkDescriptorSetLayoutCreateInfo layoutInfo = {};
	layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
	layoutInfo.bindingCount = static_cast<uint32_t>(layoutBinding.size());
	layoutInfo.pBindings = layoutBinding.data();

	VK_CHECK_RESULT(vkCreateDescriptorSetLayout(p_vkEngine->GetDevice(), &layoutInfo, nullptr, &m_waterInfo.descriptors.layout));

	VkDescriptorSetAllocateInfo allocInfo = {};
	allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
	allocInfo.descriptorPool = m_waterInfo.descriptors.pool;
	allocInfo.descriptorSetCount = 1;
	allocInfo.pSetLayouts = &m_waterInfo.descriptors.layout;

	VK_CHECK_RESULT(vkAllocateDescriptorSets(p_vkEngine->GetDevice(), &allocInfo, &m_waterInfo.descriptors.set));

	std::array<VkDescriptorBufferInfo, 2> bufferInfo;
	bufferInfo[0] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_waterInfo.uboTese.block_id), m_waterInfo.uboTese.offset, m_waterInfo.uboTese.size);															
	bufferInfo[1] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_waterInfo.uboFrag.block_id), m_waterInfo.uboFrag.offset, m_waterInfo.uboFrag.size);														
	std::array<VkDescriptorImageInfo, 3> imageInfo;
	imageInfo[0] = vkUtility->InitImageInfoDescriptor(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, m_dispComputeInfo.image.imageView, m_dispComputeInfo.image.texSampler);	// displacement texture sampler - derives from compute shader computations
	imageInfo[1] = vkUtility->InitImageInfoDescriptor(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, m_normalInfo.image.imageView, m_normalInfo.image.texSampler);				// texture sampler for normal map
	imageInfo[2] = vkUtility->InitImageInfoDescriptor(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, m_waterInfo.noiseImage.imageView, m_waterInfo.noiseImage.texSampler);			// texture sampler for perlin noise

	std::array<VkWriteDescriptorSet, 5> writeDescrSet = {};
	writeDescrSet[0] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, &bufferInfo[0]);
	writeDescrSet[1] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 1, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, &imageInfo[0]);
	writeDescrSet[2] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 2, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, &imageInfo[1]);
	writeDescrSet[3] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 3, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, &imageInfo[2]);
	writeDescrSet[4] = vkUtility->InitDescriptorSet(m_waterInfo.descriptors.set, 4, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, &bufferInfo[1]);

	vkUpdateDescriptorSets(p_vkEngine->GetDevice(), static_cast<uint32_t>(writeDescrSet.size()), writeDescrSet.data(), 0, nullptr);
}

void VulkanWater::PreparePipeline()
{
	auto vkDeferred = p_vkEngine->VkModule<VulkanDeferred>();

	// tesselation pipeline
	TerrainUtility::Vertex vertex;
	auto bindingDescr = vertex.GetInputBindingDescription();
	auto attrDescr = vertex.GetAttrBindingDescription();

	VkPipelineVertexInputStateCreateInfo vertexInfo = {};
	vertexInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
	vertexInfo.vertexBindingDescriptionCount = 1;
	vertexInfo.pVertexBindingDescriptions = &bindingDescr;
	vertexInfo.vertexAttributeDescriptionCount = static_cast<uint32_t>(attrDescr.size());
	vertexInfo.pVertexAttributeDescriptions = attrDescr.data();

	VkPipelineInputAssemblyStateCreateInfo assemblyInfo = {};
	assemblyInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
	assemblyInfo.topology = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST;										// used for tesselation shader draw
	assemblyInfo.primitiveRestartEnable = VK_FALSE;

	VkPipelineViewportStateCreateInfo viewportState = vkUtility->InitViewPortCreateInfo(p_vkEngine->GetViewPort(), p_vkEngine->GetScissor(), 1, 1);

	VkPipelineRasterizationStateCreateInfo rasterInfo = vkUtility->InitRasterzationState(VK_POLYGON_MODE_FILL, VK_CULL_MODE_NONE, VK_FRONT_FACE_COUNTER_CLOCKWISE);

	VkPipelineMultisampleStateCreateInfo multiInfo = vkUtility->InitMultisampleState(VK_SAMPLE_COUNT_1_BIT);

	// colour attachment required for each colour buffer
	std::array<VkPipelineColorBlendAttachmentState, 8> colorAttach = {};
	colorAttach[0].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[0].blendEnable = VK_FALSE;
	colorAttach[1].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[1].blendEnable = VK_FALSE;
	colorAttach[2].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[2].blendEnable = VK_FALSE;
	colorAttach[3].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[3].blendEnable = VK_FALSE;
	colorAttach[4].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[4].blendEnable = VK_FALSE;
	colorAttach[5].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[5].blendEnable = VK_FALSE;
	colorAttach[6].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[6].blendEnable = VK_FALSE;
	colorAttach[7].colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	colorAttach[7].blendEnable = VK_FALSE;

	VkPipelineColorBlendStateCreateInfo colorInfo = {};
	colorInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
	colorInfo.logicOpEnable = VK_FALSE;
	colorInfo.attachmentCount = static_cast<uint32_t>(colorAttach.size());
	colorInfo.pAttachments = colorAttach.data();

	VkDynamicState states[] = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR, VK_DYNAMIC_STATE_LINE_WIDTH };
	VkPipelineDynamicStateCreateInfo dynamicInfo = {};
	dynamicInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
	dynamicInfo.pDynamicStates = states;
	dynamicInfo.dynamicStateCount = 3;

	VkPipelineDepthStencilStateCreateInfo depthInfo = {};
	depthInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
	depthInfo.depthTestEnable = VK_TRUE;
	depthInfo.depthWriteEnable = VK_TRUE;
	depthInfo.depthCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL;

	// enable stencil test - to ensure that the skybox is rendered correctly
	depthInfo.stencilTestEnable = VK_TRUE;
	depthInfo.back.compareOp = VK_COMPARE_OP_ALWAYS;
	depthInfo.back.failOp = VK_STENCIL_OP_REPLACE;
	depthInfo.back.depthFailOp = VK_STENCIL_OP_REPLACE;
	depthInfo.back.passOp = VK_STENCIL_OP_REPLACE;
	depthInfo.back.writeMask = 0xff;
	depthInfo.back.compareMask = 0xff;
	depthInfo.back.reference = 1;
	depthInfo.front = depthInfo.back;

	VkPipelineTessellationStateCreateInfo tessInfo = {};
	tessInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
	tessInfo.patchControlPoints = 4;		//	patch quad

	VkPipelineLayoutCreateInfo pipelineInfo = {};
	pipelineInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	pipelineInfo.setLayoutCount = 1;
	pipelineInfo.pSetLayouts = &m_waterInfo.descriptors.layout;
	pipelineInfo.pPushConstantRanges = 0;
	pipelineInfo.pushConstantRangeCount = 0;

	VK_CHECK_RESULT(vkCreatePipelineLayout(p_vkEngine->GetDevice(), &pipelineInfo, nullptr, &m_waterInfo.pipelineInfo.layout));

	// load the shaders with tyexture samplers for material textures
	m_waterInfo.shader[0] = vkUtility->InitShaders("terrain/water/water-vert.spv", VK_SHADER_STAGE_VERTEX_BIT);
	m_waterInfo.shader[1] = vkUtility->InitShaders("terrain/water/water-frag.spv", VK_SHADER_STAGE_FRAGMENT_BIT);
	m_waterInfo.shader[2] = vkUtility->InitShaders("terrain/water/water-tesc.spv", VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT);
	m_waterInfo.shader[3] = vkUtility->InitShaders("terrain/water/water-tese.spv", VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);

	VkGraphicsPipelineCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
	createInfo.stageCount = static_cast<uint32_t>(m_waterInfo.shader.size());
	createInfo.pStages = m_waterInfo.shader.data();
	createInfo.pVertexInputState = &vertexInfo;
	createInfo.pInputAssemblyState = &assemblyInfo;
	createInfo.pViewportState = &viewportState;
	createInfo.pRasterizationState = &rasterInfo;
	createInfo.pMultisampleState = &multiInfo;
	createInfo.pDepthStencilState = &depthInfo;
	createInfo.pColorBlendState = &colorInfo;
	createInfo.pDynamicState = &dynamicInfo;
	createInfo.pTessellationState = &tessInfo;
	createInfo.layout = m_waterInfo.pipelineInfo.layout;
	createInfo.renderPass = vkDeferred->GetRenderPass();			// render into the offscreen buffer
	createInfo.subpass = 0;											// G buffer pass
	createInfo.basePipelineIndex = -1;
	createInfo.flags = VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT;
	createInfo.basePipelineHandle = VK_NULL_HANDLE;

	VK_CHECK_RESULT(vkCreateGraphicsPipelines(p_vkEngine->GetDevice(), VK_NULL_HANDLE, 1, &createInfo, nullptr, &m_waterInfo.pipelineInfo.pipeline));
}

void VulkanWater::GenerateWaterCmdBuffer(VkCommandBuffer cmdBuffer, VkDescriptorSet set, VkPipelineLayout layout, VkPipeline pipeline)
{
	if (pipeline == VK_NULL_HANDLE) {
		vkCmdSetLineWidth(cmdBuffer, 1.0f);
	}

	VkDeviceSize bgOffsets[] = { m_waterInfo.vertices.offset };

	//  draw water
	vkCmdBindPipeline(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, (pipeline == VK_NULL_HANDLE) ? m_waterInfo.pipelineInfo.pipeline : pipeline);
	vkCmdBindVertexBuffers(cmdBuffer, 0, 1, &p_vkMemory->blockBuffer(m_waterInfo.vertices.block_id), bgOffsets);
	vkCmdBindIndexBuffer(cmdBuffer, p_vkMemory->blockBuffer(m_waterInfo.indices.block_id), m_waterInfo.indices.offset, VK_INDEX_TYPE_UINT32);
	vkCmdBindDescriptorSets(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, (pipeline == VK_NULL_HANDLE) ? m_waterInfo.pipelineInfo.layout : layout, 0, 1, (pipeline == VK_NULL_HANDLE) ? &m_waterInfo.descriptors.set : &set, 0, NULL);
	vkCmdDrawIndexed(cmdBuffer, m_waterInfo.indexCount, 1, 0, 0, 0);
}

// ============================================ compute shader setup - descriptors, pipeline and command buffer ===============================================================================================
void VulkanWater::PrepareComputeBuffers()
{
	// spectrum compute
	// stroage buffers - used only by the compute shaders so map to loacl memory
	m_specComputeInfo.ssboBuffer.dx = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, sizeof(glm::vec2) * TOTAL_DISPLACEMENT_SIZE);
	m_specComputeInfo.ssboBuffer.dy = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, sizeof(glm::vec2) * TOTAL_DISPLACEMENT_SIZE);
	m_specComputeInfo.ssboBuffer.ht = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, sizeof(glm::vec2) * TOTAL_DISPLACEMENT_SIZE);

	// ubo buffer
	m_specComputeInfo.uboBuffer = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_DYNAMIC, sizeof(ComputeUbo));
	
	// map ubo data to local device
	std::vector<ComputeUbo> ubo(1);
	ubo[0].dismapDim = DISPLACEMENT_MAP_SIZE;
	ubo[0].time = 0;								// zero time point at initialisation
	p_vkMemory->MapDataToSegment<ComputeUbo>(m_specComputeInfo.uboBuffer, ubo);

	// buffers for displacement compute pipeline
	m_dispComputeInfo.uboBuffer = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_DYNAMIC, sizeof(DisplacementUbo));
	
	std::vector<DisplacementUbo> disUbo(1);
	disUbo[0].choppiness = m_waterParams.choppiness;
	disUbo[0].mapSize = DISPLACEMENT_MAP_SIZE;
	p_vkMemory->MapDataToSegment<DisplacementUbo>(m_dispComputeInfo.uboBuffer, disUbo);

	// prepare texture sampler which will be outputed too from the compute shader and sampled from by the frag shader
	m_dispComputeInfo.image.PrepareImage(VK_FORMAT_R16G16B16A16_UNORM, VK_SAMPLER_ADDRESS_MODE_REPEAT, VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT, DISPLACEMENT_MAP_SIZE, DISPLACEMENT_MAP_SIZE, p_vkEngine, 8.0f);
}

void VulkanWater::PrepareSpecComputeDescriptors()
{
	// =============================================== descriptor pool =======================================================================
	std::array<VkDescriptorPoolSize, 2> descrPoolSize = {};
	descrPoolSize[0].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	descrPoolSize[0].descriptorCount = 1;
	descrPoolSize[1].type = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
	descrPoolSize[1].descriptorCount = 5;

	VkDescriptorPoolCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	createInfo.poolSizeCount = static_cast<uint32_t>(descrPoolSize.size());
	createInfo.pPoolSizes = descrPoolSize.data();
	createInfo.maxSets = 1;

	VK_CHECK_RESULT(vkCreateDescriptorPool(p_vkEngine->GetDevice(), &createInfo, nullptr, &m_specComputeInfo.descriptors.pool));

	// =============================================== descriptor layout ====================================================================
	std::array<VkDescriptorSetLayoutBinding, 6> layoutBinding;
	layoutBinding[0] = vkUtility->InitLayoutBinding(0, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// bindings for the src SSBO - h(0)
	layoutBinding[1] = vkUtility->InitLayoutBinding(1, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// bindings for the src SSBO - omega	
	layoutBinding[2] = vkUtility->InitLayoutBinding(2, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// bindings for the dst SSBO - h(t)
	layoutBinding[3] = vkUtility->InitLayoutBinding(3, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// bindings for the dst SSBO - dx(t)	
	layoutBinding[4] = vkUtility->InitLayoutBinding(4, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// bindings for the dst SSBO - dy(t)	
	layoutBinding[5] = vkUtility->InitLayoutBinding(5, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// bindings for the UBO	

	VkDescriptorSetLayoutCreateInfo layoutInfo = {};
	layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
	layoutInfo.bindingCount = static_cast<uint32_t>(layoutBinding.size());
	layoutInfo.pBindings = layoutBinding.data();

	VK_CHECK_RESULT(vkCreateDescriptorSetLayout(p_vkEngine->GetDevice(), &layoutInfo, nullptr, &m_specComputeInfo.descriptors.layout));

	// ================================================ descriptor sets =====================================================================
	VkDescriptorSetAllocateInfo allocInfo = {};
	allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
	allocInfo.descriptorPool = m_specComputeInfo.descriptors.pool;
	allocInfo.descriptorSetCount = 1;
	allocInfo.pSetLayouts = &m_specComputeInfo.descriptors.layout;

	VK_CHECK_RESULT(vkAllocateDescriptorSets(p_vkEngine->GetDevice(), &allocInfo, &m_specComputeInfo.descriptors.set));

	std::array<VkDescriptorBufferInfo, 6> bufferInfo;
	bufferInfo[0] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_buffers.heightMap.block_id), m_buffers.heightMap.offset, m_buffers.heightMap.size);												// h(0)
	bufferInfo[1] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_buffers.omegaMap.block_id), m_buffers.omegaMap.offset, m_buffers.omegaMap.size);													// omega
	bufferInfo[2] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.ht.block_id), m_specComputeInfo.ssboBuffer.ht.offset, m_specComputeInfo.ssboBuffer.ht.size);			// h(t)
	bufferInfo[3] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.dx.block_id), m_specComputeInfo.ssboBuffer.dx.offset, m_specComputeInfo.ssboBuffer.dx.size);			// dx(t)
	bufferInfo[4] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.dy.block_id), m_specComputeInfo.ssboBuffer.dy.offset, m_specComputeInfo.ssboBuffer.dy.size);			// dy(t)
	bufferInfo[5] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_specComputeInfo.uboBuffer.block_id), m_specComputeInfo.uboBuffer.offset, m_specComputeInfo.uboBuffer.size);																					// ubo

	std::array<VkWriteDescriptorSet, 6> writeDescrSet = {};
	writeDescrSet[0] = vkUtility->InitDescriptorSet(m_specComputeInfo.descriptors.set, 0, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, &bufferInfo[0]);
	writeDescrSet[1] = vkUtility->InitDescriptorSet(m_specComputeInfo.descriptors.set, 1, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, &bufferInfo[1]);
	writeDescrSet[2] = vkUtility->InitDescriptorSet(m_specComputeInfo.descriptors.set, 2, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, &bufferInfo[2]);
	writeDescrSet[3] = vkUtility->InitDescriptorSet(m_specComputeInfo.descriptors.set, 3, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, &bufferInfo[3]);
	writeDescrSet[4] = vkUtility->InitDescriptorSet(m_specComputeInfo.descriptors.set, 4, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, &bufferInfo[4]);
	writeDescrSet[5] = vkUtility->InitDescriptorSet(m_specComputeInfo.descriptors.set, 5, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, &bufferInfo[5]);

	vkUpdateDescriptorSets(p_vkEngine->GetDevice(), static_cast<uint32_t>(writeDescrSet.size()), writeDescrSet.data(), 0, nullptr);
}

void VulkanWater::PrepareDispComputeDescriptorSets()
{
	// terrain descriptors
	std::array<VkDescriptorPoolSize, 3> descrPoolSize = {};
	descrPoolSize[0].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	descrPoolSize[0].descriptorCount = 1;
	descrPoolSize[1].type = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
	descrPoolSize[1].descriptorCount = 3;
	descrPoolSize[2].type = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
	descrPoolSize[2].descriptorCount = 1;

	VkDescriptorPoolCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	createInfo.poolSizeCount = static_cast<uint32_t>(descrPoolSize.size());
	createInfo.pPoolSizes = descrPoolSize.data();
	createInfo.maxSets = 1;

	VK_CHECK_RESULT(vkCreateDescriptorPool(p_vkEngine->GetDevice(), &createInfo, nullptr, &m_dispComputeInfo.descriptors.pool));

	std::array<VkDescriptorSetLayoutBinding, 5> layoutBinding;
	layoutBinding[0] = vkUtility->InitLayoutBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// bindings for the UBO	- used by both updates
	layoutBinding[1] = vkUtility->InitLayoutBinding(1, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// dx(t) buffer
	layoutBinding[2] = vkUtility->InitLayoutBinding(2, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// dy(t) buffer	
	layoutBinding[3] = vkUtility->InitLayoutBinding(3, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_SHADER_STAGE_COMPUTE_BIT);					// h(t) buffer
	layoutBinding[4] = vkUtility->InitLayoutBinding(4, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, VK_SHADER_STAGE_COMPUTE_BIT);			// displacement sampler - output

	VkDescriptorSetLayoutCreateInfo layoutInfo = {};
	layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
	layoutInfo.bindingCount = static_cast<uint32_t>(layoutBinding.size());
	layoutInfo.pBindings = layoutBinding.data();

	VK_CHECK_RESULT(vkCreateDescriptorSetLayout(p_vkEngine->GetDevice(), &layoutInfo, nullptr, &m_dispComputeInfo.descriptors.layout));

	VkDescriptorSetAllocateInfo allocInfo = {};
	allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
	allocInfo.descriptorPool = m_dispComputeInfo.descriptors.pool;
	allocInfo.descriptorSetCount = 1;
	allocInfo.pSetLayouts = &m_dispComputeInfo.descriptors.layout;

	VK_CHECK_RESULT(vkAllocateDescriptorSets(p_vkEngine->GetDevice(), &allocInfo, &m_dispComputeInfo.descriptors.set));

	std::array<VkDescriptorBufferInfo, 4> bufferInfo;
	bufferInfo[0] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_dispComputeInfo.uboBuffer.block_id), m_dispComputeInfo.uboBuffer.offset, m_dispComputeInfo.uboBuffer.size);					// ubo
	bufferInfo[1] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.dx.block_id), m_specComputeInfo.ssboBuffer.dx.offset, m_specComputeInfo.ssboBuffer.dx.size);		// dx(t) - buffers derived from compute shader calcultaions
	bufferInfo[2] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.dy.block_id), m_specComputeInfo.ssboBuffer.dy.offset, m_specComputeInfo.ssboBuffer.dy.size);		// dy(t)
	bufferInfo[3] = vkUtility->InitBufferInfoDescriptor(p_vkMemory->blockBuffer(p_FFT->m_ssboDstBuffer.block_id), p_FFT->m_ssboDstBuffer.offset, p_FFT->m_ssboDstBuffer.size);									// fft	
	std::array<VkDescriptorImageInfo, 1> imageInfo;
	imageInfo[0] = vkUtility->InitImageInfoDescriptor(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, m_dispComputeInfo.image.imageView, m_dispComputeInfo.image.texSampler);			// displacement map texture sampler

	std::array<VkWriteDescriptorSet, 5> writeDescrSet = {};
	writeDescrSet[0] = vkUtility->InitDescriptorSet(m_dispComputeInfo.descriptors.set, 0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, &bufferInfo[0]);
	writeDescrSet[1] = vkUtility->InitDescriptorSet(m_dispComputeInfo.descriptors.set, 1, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, &bufferInfo[1]);
	writeDescrSet[2] = vkUtility->InitDescriptorSet(m_dispComputeInfo.descriptors.set, 2, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, &bufferInfo[2]);
	writeDescrSet[3] = vkUtility->InitDescriptorSet(m_dispComputeInfo.descriptors.set, 3, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, &bufferInfo[3]);
	writeDescrSet[4] = vkUtility->InitDescriptorSet(m_dispComputeInfo.descriptors.set, 4, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, &imageInfo[0]);


	vkUpdateDescriptorSets(p_vkEngine->GetDevice(), static_cast<uint32_t>(writeDescrSet.size()), writeDescrSet.data(), 0, nullptr);
}

void VulkanWater::PrepareSpecComputePipeLine()
{
	// spectrum update compute pipeline
	VkPipelineLayoutCreateInfo pipelineInfo = {};
	pipelineInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	pipelineInfo.setLayoutCount = 1;
	pipelineInfo.pSetLayouts = &m_specComputeInfo.descriptors.layout;
	pipelineInfo.pPushConstantRanges = 0;
	pipelineInfo.pushConstantRangeCount = 0;

	VK_CHECK_RESULT(vkCreatePipelineLayout(p_vkEngine->GetDevice(), &pipelineInfo, nullptr, &m_specComputeInfo.pipelineInfo.layout));

	m_specComputeInfo.shader = vkUtility->InitShaders("terrain/water/spectrum-comp.spv", VK_SHADER_STAGE_COMPUTE_BIT);

	VkComputePipelineCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
	createInfo.layout = m_specComputeInfo.pipelineInfo.layout;
	createInfo.stage = m_specComputeInfo.shader;
	createInfo.basePipelineIndex = -1;
	createInfo.basePipelineHandle = VK_NULL_HANDLE;

	VK_CHECK_RESULT(vkCreateComputePipelines(p_vkEngine->GetDevice(), VK_NULL_HANDLE, 1, &createInfo, nullptr, &m_specComputeInfo.pipelineInfo.pipeline));
}

void VulkanWater::PrepareDispComputePipeLine()
{
	// spectrum update compute pipeline
	VkPipelineLayoutCreateInfo pipelineInfo = {};
	pipelineInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	pipelineInfo.setLayoutCount = 1;
	pipelineInfo.pSetLayouts = &m_dispComputeInfo.descriptors.layout;
	pipelineInfo.pPushConstantRanges = 0;
	pipelineInfo.pushConstantRangeCount = 0;

	VK_CHECK_RESULT(vkCreatePipelineLayout(p_vkEngine->GetDevice(), &pipelineInfo, nullptr, &m_dispComputeInfo.pipelineInfo.layout));

	m_dispComputeInfo.shader = vkUtility->InitShaders("terrain/water/displacement-comp.spv", VK_SHADER_STAGE_COMPUTE_BIT);

	VkComputePipelineCreateInfo createInfo = {};
	createInfo.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
	createInfo.layout = m_dispComputeInfo.pipelineInfo.layout;
	createInfo.stage = m_dispComputeInfo.shader;
	createInfo.basePipelineIndex = -1;
	createInfo.basePipelineHandle = VK_NULL_HANDLE;

	VK_CHECK_RESULT(vkCreateComputePipelines(p_vkEngine->GetDevice(), VK_NULL_HANDLE, 1, &createInfo, nullptr, &m_dispComputeInfo.pipelineInfo.pipeline));
}

void VulkanWater::GenerateSpecComputeCmdBuffers()
{
	m_specComputeInfo.cmdBuffer = vkUtility->CreateCmdBuffer(VulkanUtility::VK_PRIMARY, VulkanUtility::VK_MULTI_USE, VK_NULL_HANDLE, VK_NULL_HANDLE, p_vkEngine->GetComputeCmdPool());

	// but will use a fence to ensure that the compute shader has finished before proceeding
	VkFenceCreateInfo fenceInfo = {};
	fenceInfo.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
	fenceInfo.flags = VK_FENCE_CREATE_SIGNALED_BIT;
	VK_CHECK_RESULT(vkCreateFence(p_vkEngine->GetDevice(), &fenceInfo, nullptr, &m_specComputeInfo.fence));

	// Ensure that the vertex shader has finished reading before updating data
	VkBufferMemoryBarrier computeBarrier = {};
	computeBarrier.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
	computeBarrier.srcAccessMask = VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT;
	computeBarrier.dstAccessMask = VK_ACCESS_SHADER_WRITE_BIT;
	computeBarrier.srcQueueFamilyIndex = p_vkEngine->GetGraphQueueIndex();
	computeBarrier.dstQueueFamilyIndex = p_vkEngine->GetComputeQueueIndex();
	computeBarrier.size = VK_WHOLE_SIZE;

	std::array<VkBufferMemoryBarrier, 5> bufferBarriers = {};
	computeBarrier.buffer = p_vkMemory->blockBuffer(m_buffers.heightMap.block_id);
	bufferBarriers[0] = computeBarrier;
	computeBarrier.buffer = p_vkMemory->blockBuffer(m_buffers.omegaMap.block_id);
	bufferBarriers[1] = computeBarrier;
	computeBarrier.buffer = p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.ht.block_id);
	bufferBarriers[2] = computeBarrier;
	computeBarrier.buffer = p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.dx.block_id);
	bufferBarriers[3] = computeBarrier;
	computeBarrier.buffer = p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.dy.block_id);
	bufferBarriers[4] = computeBarrier;
	
	vkCmdPipelineBarrier(m_specComputeInfo.cmdBuffer, VK_PIPELINE_STAGE_VERTEX_INPUT_BIT, VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT, 0, 0, nullptr, static_cast<uint32_t>(bufferBarriers.size()), bufferBarriers.data(), 0, nullptr);

	uint32_t workCount = (DISPLACEMENT_MAP_SIZE + BLOCK_SIZE) / BLOCK_SIZE;		// local group size = 16 x 16 block
	vkCmdBindPipeline(m_specComputeInfo.cmdBuffer, VK_PIPELINE_BIND_POINT_COMPUTE, m_specComputeInfo.pipelineInfo.pipeline);
	vkCmdBindDescriptorSets(m_specComputeInfo.cmdBuffer, VK_PIPELINE_BIND_POINT_COMPUTE, m_specComputeInfo.pipelineInfo.layout, 0, 1, &m_specComputeInfo.descriptors.set, 0, nullptr);
	vkCmdDispatch(m_specComputeInfo.cmdBuffer, workCount, workCount, 1);

	for (uint32_t c = 0; c < bufferBarriers.size(); ++c) {
		bufferBarriers[c].srcAccessMask = VK_ACCESS_SHADER_WRITE_BIT;
		bufferBarriers[c].dstAccessMask = VK_ACCESS_SHADER_READ_BIT;
		bufferBarriers[c].srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
		bufferBarriers[c].dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
	}

	vkCmdPipelineBarrier(m_specComputeInfo.cmdBuffer, VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT, VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT, 0, 0, nullptr, static_cast<uint32_t>(bufferBarriers.size()), bufferBarriers.data(), 0, nullptr);
	vkEndCommandBuffer(m_specComputeInfo.cmdBuffer);
}

void VulkanWater::GenerateDispComputeCmdBuffers()
{
	m_dispComputeInfo.cmdBuffer = vkUtility->CreateCmdBuffer(VulkanUtility::VK_PRIMARY, VulkanUtility::VK_MULTI_USE, VK_NULL_HANDLE, VK_NULL_HANDLE, p_vkEngine->GetComputeCmdPool());

	// but will use a fence to ensure that the compute shader has finished before proceeding
	VkFenceCreateInfo fenceInfo = {};
	fenceInfo.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
	fenceInfo.flags = VK_FENCE_CREATE_SIGNALED_BIT;
	VK_CHECK_RESULT(vkCreateFence(p_vkEngine->GetDevice(), &fenceInfo, nullptr, &m_dispComputeInfo.fence));

	uint32_t workCount = (DISPLACEMENT_MAP_SIZE + BLOCK_SIZE) / BLOCK_SIZE;		// local group size = 16 x 16 block
	vkCmdBindPipeline(m_dispComputeInfo.cmdBuffer, VK_PIPELINE_BIND_POINT_COMPUTE, m_dispComputeInfo.pipelineInfo.pipeline);
	vkCmdBindDescriptorSets(m_dispComputeInfo.cmdBuffer, VK_PIPELINE_BIND_POINT_COMPUTE, m_dispComputeInfo.pipelineInfo.layout, 0, 1, &m_dispComputeInfo.descriptors.set, 0, nullptr);
	vkCmdDispatch(m_dispComputeInfo.cmdBuffer, workCount, workCount, 1);

	vkEndCommandBuffer(m_dispComputeInfo.cmdBuffer);
}

void VulkanWater::SubmitWaterCompute()
{
	// submit spectrum calculations first
	vkResetFences(p_vkEngine->GetDevice(), 1, &m_specComputeInfo.fence);

	VkSubmitInfo submitInfo = {};
	submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
	submitInfo.commandBufferCount = 1;
	submitInfo.pCommandBuffers = &m_specComputeInfo.cmdBuffer;

	VK_CHECK_RESULT(vkQueueSubmit(p_vkEngine->GetComputeQueue(), 1, &submitInfo, m_specComputeInfo.fence));

	// submit spectrum compute shader
	vkWaitForFences(p_vkEngine->GetDevice(), 1, &m_specComputeInfo.fence, VK_TRUE, UINT64_MAX);
	vkResetFences(p_vkEngine->GetDevice(), 1, &m_specComputeInfo.fence);

	// submit fft compute
	p_FFT->SubmitFFTCompute();

	// submit displacement compute
	vkResetFences(p_vkEngine->GetDevice(), 1, &m_dispComputeInfo.fence);

	submitInfo.pCommandBuffers = &m_dispComputeInfo.cmdBuffer;
	VK_CHECK_RESULT(vkQueueSubmit(p_vkEngine->GetComputeQueue(), 1, &submitInfo, m_dispComputeInfo.fence));

	vkWaitForFences(p_vkEngine->GetDevice(), 1, &m_dispComputeInfo.fence, VK_TRUE, UINT64_MAX);
	vkResetFences(p_vkEngine->GetDevice(), 1, &m_dispComputeInfo.fence);
}

// ================================================= Heightmap functons - h(0)  ==========================================================================================================

float VulkanWater::GeneratePhillips(glm::vec2 k)
{
	float k_len = glm::length(k);

	// calculate L
	float w = m_waterParams.windSpeed;
	float L = w * w / GRAVITY;
	float damp = 1 / 1000;			// dampening of waves with small length

	glm::vec2 windDir = glm::normalize(m_waterParams.windDir);
	float amp = m_waterParams.amplitude * 1e-7f;

	float k_sqr = k.x * k.x + k.y * k.y;
	float k_cos = k.x * windDir.x + k.y * windDir.y;

	float phil = amp * expf(-1 / (L * L * k_sqr)) / (k_sqr * k_sqr * k_sqr) * (k_cos * k_cos);
	if (k_cos < 0) {
		phil = 0.07f;
	}

	return phil * expf(-k_sqr * damp * damp);
}

void VulkanWater::GenerateHeightMap()
{
	glm::vec2 k;
	RandomNumber *p_rand = new RandomNumber();
	uint32_t vecSize = (HEIGHTMAP_DIM + 4) * (HEIGHTMAP_DIM + 1);

	std::vector<float> omegaMap;
	omegaMap.resize(vecSize);

	std::vector<glm::vec2> heightMap;
	heightMap.resize(vecSize);

	for (uint32_t y = 0; y <= HEIGHTMAP_DIM; ++y) {

		k.y = (-HEIGHTMAP_DIM / 2.0f + y) * (2 * PI / m_waterParams.patchLength);

		for (uint32_t x = 0; x <= HEIGHTMAP_DIM; ++x) {

			k.x = (-HEIGHTMAP_DIM / 2.0f + x) * (2 * PI / m_waterParams.patchLength);

			float dispersion = (k.x == 0 && k.y == 0) ? 0.0 : sqrt(GeneratePhillips(k));

			//

			heightMap[y * (HEIGHTMAP_DIM + 4) + x].x = dispersion * p_rand->GaussRandomNumber(RAND_MAX) * 0.7071068f;
			heightMap[y * (HEIGHTMAP_DIM + 4) + x].y = dispersion * p_rand->GaussRandomNumber(RAND_MAX) * 0.7071068f;
			
			// calculate omega values - sqrt(g * k)
			float sqK = sqrtf(k.x * k.x + k.y * k.y);	
			omegaMap[y * (HEIGHTMAP_DIM + 4) + x] = sqrtf(GRAVITY * sqK);
		}
	}
	delete p_rand;

	// upload omega and height map to gpu - ssbo used for compute shader input
	m_buffers.heightMap = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, vecSize * sizeof(glm::vec2));
	p_vkMemory->MapDataToSegment<glm::vec2>(m_buffers.heightMap, heightMap);

	m_buffers.omegaMap = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, vecSize * sizeof(float));
	p_vkMemory->MapDataToSegment<float>(m_buffers.omegaMap, omegaMap);
}

// ================================================================ mesh generation ======================================================================================
void VulkanWater::GenerateMeshData()
{
	TerrainUtility *p_utility = new TerrainUtility();

	// generate vertices and uv data
	std::vector<TerrainUtility::Vertex> vertices;
	p_utility->GenerateVertices(PATCH_SIZE, UV_SCALE, vertices);

	// generate the indices for the patch quads
	m_waterInfo.indexCount = ((PATCH_SIZE - 1) * (PATCH_SIZE - 1)) * 4;

	std::vector<uint32_t> indices;
	p_utility->GenerateIndices(PATCH_SIZE, indices);

	// now map to device memory
	// vertex
	m_waterInfo.vertices = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, vertices.size() * sizeof(TerrainUtility::Vertex));
	p_vkMemory->MapDataToSegment<TerrainUtility::Vertex>(m_waterInfo.vertices, vertices);

	//index
	m_waterInfo.indices = p_vkMemory->AllocateSegment(MemoryUsage::VK_BUFFER_STATIC, indices.size() * sizeof(uint32_t));
	p_vkMemory->MapDataToSegment<uint32_t>(m_waterInfo.indices, indices);

	delete p_utility;
}

 // =============================================================== general functions ====================================================================================

void VulkanWater::LoadWaterAssets()
{
	// import the tiling image
	m_waterInfo.noiseImage.LoadTexture("assets/textures/perlin_noise.ktx", VK_SAMPLER_ADDRESS_MODE_REPEAT, 16.0f, VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE, VK_FORMAT_BC3_UNORM_BLOCK, p_vkEngine->GetCmdPool(), p_vkEngine, p_vkMemory);
}

void VulkanWater::Update(int acc_time)
{
	auto camera = p_vkEngine->GetCurrentWorld()->RequestSystem<CameraSystem>();

	// update terrain tesselation ubo
	std::vector<TerrainTeseUbo> ubo(1);
	ubo[0].projection = camera->m_cameraInfo.projection;
	ubo[0].viewMatrix = camera->m_cameraInfo.viewMatrix;
	ubo[0].cameraPos = glm::vec4(camera->GetCameraPosition(), 1.0f);
	ubo[0].modelMatrix = glm::mat4(1.0f);
	ubo[0].screenDim = glm::vec2(p_vkEngine->GetSurfaceExtentW(), p_vkEngine->GetSurfaceExtentH());

	// perlin noise constants
	ubo[0].perlinOctave = PERLIN_OCTAVE;
	ubo[0].perlinAmplitude = PERLIN_AMPLITUDE;
	ubo[0].perlinMovement = PERLIN_SPEED;

	// constant tessellation values
	ubo[0].dispFactor = TESSELLATION_DISP_FACTOR;
	ubo[0].tessFactor = TESSELLATION_FACTOR;
	ubo[0].tessEdgeSize = TESSELLATION_EDGE_SIZE;
	p_vkMemory->MapDataToSegment<TerrainTeseUbo>(m_waterInfo.uboTese, ubo);

	// update the compute ubo buffer 
	// map ubo data to local device
	std::vector<ComputeUbo> compUbo(1);
	compUbo[0].dismapDim = DISPLACEMENT_MAP_SIZE;
	compUbo[0].time = acc_time * m_waterParams.time;
	p_vkMemory->MapDataToSegment<ComputeUbo>(m_specComputeInfo.uboBuffer, compUbo);
}

void VulkanWater::Init()
{
	// Begin by importing required textures
	LoadWaterAssets();

	// The order of calculation flow is as follows:
	// h(0) and omega vaules genetared (CPU) -> compute spectrum h(t), dx(t), dy(t) (compute shader) ->
	// fftC2C -> D(x,y,z)
	// -> create displacemnet map in shader using D(x,yz) -> generate normals and fold using displacement map
	
	// 1: genertae the h(0) and omega values for use by the compute shader
	GenerateHeightMap();
	
	// 2: h(0) -> h(t) - prepare spectrum compute shaders
	PrepareComputeBuffers();
	PrepareSpecComputeDescriptors();
	PrepareSpecComputePipeLine();
	GenerateSpecComputeCmdBuffers();

	// 3: FFT c2c - h(t) -> d(z)
	p_FFT->CreateBuffers();
	p_FFT->PrepareFFTDescriptorSets(m_specComputeInfo.ssboBuffer.ht);
	p_FFT->PrepareFFTPipeline();
	p_FFT->GenerateFFTCmdBuffer(p_vkMemory->blockBuffer(m_specComputeInfo.ssboBuffer.ht.block_id));

	// 4: create displacement sampler using compute shader from d(x,y,z)
	PrepareDispComputeDescriptorSets();
	PrepareDispComputePipeLine();
	GenerateDispComputeCmdBuffers();

	// 5: create normal maps from displacement data  - init offscreen pipeline
	PrepareOffscreenBuffers();
	PrepareOffscreenFrameBuffer();
	PrepareOffscreenDescriptorSets();
	PrepareOffscreenPipeline();

	// genertae mesh data for tessellation
	GenerateMeshData();

	// init rendering pipeline
	// init ubo buffer 
	PrepareBuffers();
	PrepareDescriptorSets();
	PreparePipeline();
}

void VulkanWater::Destroy()
{

}

