#version 450

layout(std140, binding = 0) readonly buffer inHeightMap
{
	vec2 hzeroMap[];
};

layout(std140, binding = 1) readonly buffer inOmegaMap
{
	float omegaMap[];
};

layout(std140, binding = 2) writeonly buffer outHtMap
{
	vec2 outHeightMap[];	// h(t)
};

layout(std140, binding = 3) writeonly buffer outMapDxt
{
	vec2 outDxtMap[];		// dx(t)
};

layout(std140, binding = 4) writeonly buffer outMapDxy
{
	vec2 outDytMap[];		// dy(t)
};

layout(binding = 5) uniform uboBuffer
{
	float time;
	uint dismapDim;
	float _pad;
} ubo;

layout (local_size_x = 16, local_size_y = 16) in;		// local work group size of 16 x 16

void main()
{
	uvec3 id = gl_GlobalInvocationID;
	
	uint inputMapWidth = ubo.dismapDim + 4;
	
	uint i_index = id.y * inputMapWidth + id.x;
	if(i_index > inputMapWidth * inputMapWidth)
		return;
		
	uint m_Index = (ubo.dismapDim - id.y) * inputMapWidth + (ubo.dismapDim - id.x);
	
	// calculate the three spectrums from the height map
	// first calculation is to generate the height z field = H(0) -> H(t)
	vec2 k = hzeroMap[i_index];
	vec2 mk = hzeroMap[m_Index];
	
	float vSin = sin(omegaMap[i_index] * ubo.time);
	float vCos = cos(omegaMap[i_index] * ubo.time);
	
	vec2 ht = vec2(0.0);
	ht.x = (k.x + mk.x) * vCos - (k.y + mk.y) * vSin;
	ht.y = (k.x - mk.x) * vSin + (k.y - mk.y) * vCos;
	
	// generate the choppy field - H(t) -> Dx(t), Dy(t)
	float kx = id.x - ubo.dismapDim * 0.5;
	float ky = id.y - ubo.dismapDim * 0.5;
	float kSqr = kx * kx + ky * ky;
	
	float r_sqr_k = 1/ sqrt(kSqr);
	kx *= r_sqr_k;
	ky *= r_sqr_k;
	
	vec2 dxt = vec2(ht.y * kx, -ht.x * kx);
	vec2 dyt = vec2(ht.y * ky, -ht.x * ky);
	
	uint o_index = id.y * ubo.dismapDim + id.x;
	outHeightMap[o_index] = ht;
	outDxtMap[o_index] = dxt;
	outDytMap[o_index] = dyt;
}