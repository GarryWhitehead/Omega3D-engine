#version 450

layout (binding = 0) readonly buffer ssbo1
{
	vec2 pingpong0[];					// dxyz buffer - both input and ouput buffer
};

layout (binding = 1) readonly buffer ssbo2
{
	vec2 pingpong1[];					// pingpong1 - 
};

layout (set = 0, binding = 2, rgba32f) writeonly uniform image2D displacementMap;

layout (binding = 3) uniform uboBuffer
{
	float N;
	float offset_dx;
	float offset_dy;
	float offset_dz;
	float choppyFactor;
	float _pad0;
} ubo;

layout (push_constant) uniform pushConstant
{
	uint pingpong;
} push;

layout (local_size_x = 16, local_size_y = 16) in;

void main()
{
	ivec2 id = ivec2(gl_GlobalInvocationID.xy);
	if(id.x >= ubo.N || id.y >= ubo.N)
		return;
	
	float signs[] = { 1.0, -1.0 };
	float signCorrect = signs[((id.x + id.y) & 1)];
	
	float N_sqr = ubo.N * ubo.N;
	uint index = id.y * uint(ubo.N) + id.x;
	vec4 displace = vec4(1.0);
	
	if(push.pingpong == 0) {
	
		displace.x = (pingpong0[index + uint(ubo.offset_dx)].x / N_sqr) * signCorrect * ubo.choppyFactor;	// use the real number from the fft compute
		displace.y = (pingpong0[index + uint(ubo.offset_dy)].x / N_sqr) * signCorrect * ubo.choppyFactor;
		displace.z = (pingpong0[index + uint(ubo.offset_dz)].x / N_sqr) * signCorrect;
	}
	else {
	
		displace.x = (pingpong0[index + uint(ubo.offset_dx)].x / N_sqr) * signCorrect * ubo.choppyFactor;	// use the real number from the fft compute
		displace.y = (pingpong0[index + uint(ubo.offset_dy)].x / N_sqr) * signCorrect * ubo.choppyFactor;
		displace.z = (pingpong0[index + uint(ubo.offset_dz)].x / N_sqr) * signCorrect;
	}
	
	imageStore(displacementMap, id, displace);
}