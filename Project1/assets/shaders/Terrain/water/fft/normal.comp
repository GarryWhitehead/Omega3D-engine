#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0) uniform uboBuffer
{
	float choppiness;
	float gridLength;
} ubo;

layout (set = 0, binding = 1, rgba32f) readonly uniform image2D displacementMap;

layout (set = 0, binding = 2, rgba16f) writeonly uniform image2D gradientMap;

layout (local_Size_x = 16, local_size_y = 16) in;

void main()
{
	ivec2 id = ivec2(gl_GlobalInvocationID.xy);
	
	vec3 disLeft = imageLoad(displacementMap, ivec2(id.x - 1, id.y)).xyz;
	vec3 disRight = imageLoad(displacementMap, ivec2(id.x + 1, id.y)).xyz;
	vec3 disFront= imageLoad(displacementMap, ivec2(id.x, id.y - 1)).xyz;
	vec3 disBack = imageLoad(displacementMap, ivec2(id.x, id.y + 1)).xyz;
	
	vec2 grad = vec2(-(disRight.z - disLeft.z), -(disFront.z - disBack.z));
	
	// calculate Jacobian correlation and store in w component of output vec
	vec2 dx = vec2(disRight.xy - disLeft.xy) * ubo.choppiness * ubo.gridLength;
	vec2 dy = vec2(disFront.xy - disBack.xy) * ubo.choppiness * ubo.gridLength;
	
	float j = (1.0 + dx.x) * (1.0 + dy.y) - dx.y * dy.x;
	
	imageStore(gradientMap, id, vec4(grad, 0.0, max(1.0 - j, 0)));
}