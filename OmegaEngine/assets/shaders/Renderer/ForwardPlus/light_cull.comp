#version 450

#define TILE_SIZE 16

struct LightInfo
{
    vec4 position;
    vec3 colour;
    float radius;
};

// the buffer that contains all the lighting info
layout(std 140, binding = 0) buffer readonly LightingInfo
{
    LightInfo lights[]
};

// visibale light indicies which will be used on the CPU side
layout(std 140, binding = 1) buffer writeonly VisibaleLights
{
    uint visible_lights[]
};

layout(binding = 2) uniform UboBuffer
{
    ivec2 screen_size; 
    vec4 fustrum_planes[6];
} ubo;

layout(binding = 3) uniform sampler2D depthSampler;

layout (local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;

// global variables
shared uint minDepth = 0;
shared uint maxDepth = 0;
shared uint totalLights = 0;

bool checkWithinFustrum(vec4 position, float radius)
{
    for (uint i = 0; i < 6; ++i) {

        float d = dot(position, ubo.fustrum_planes[i]) + radius;

        if (d <= 0.0) {
            return false;
        }
    }
    return true;
}

void main()
{
    // for this tile, calculate the min and max z values from the depth buffer
    float min = 0.0f;
    float max = 0.0f;

    float depthFrag = texture(depthSampler, gl_GlobalInvocation.xy / ubo.screen_size).r;
    float linearDepth = (0.5 * projection[3][2]) / (depth + 0.5 * projection[2][2] - 0.5);

    // use atomic int as will be used across threads - convert to int as floats aren't supported
    uint linearDepthInt = floatBitsToUint(linearDepth);
    atomicMin(minDepth, linearDepthInt);
    atomicMax(maxDepth, linearDepthInt);

    barrier();

    // cull lights
    uint thread_count = TILE_SIZE * TILE_SIZE;
    uint count = (ubo.lightCount + thread_count - 1) / thread_count;

    for (uint i = 0; i < count; ++i) {

        uint index = thread_count * i + gl_LocalInvocationIndex.x;

        if (index >= ubo.lightCount) {
            break;
        }

        // if the light is within the fustrum, add this lights index to the buffer
        if (checkWithinFustrum(lights[index].position, lights[index].radius)) {
            
            uint visIndex = atomicAdd(totalLights, 1);
            visible_lights[visIndex] = index;
        }
    }
    
}